// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;


import frc.robot.commands.*;
import edu.wpi.first.util.sendable.SendableRegistry;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj2.command.SubsystemBase;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class Intake extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
private WPI_TalonSRX intakeMotor;
private WPI_TalonSRX intakeMotor_Follower;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    /**
    *
    */
    public Intake() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
intakeMotor = new WPI_TalonSRX(7);
 
 

intakeMotor_Follower = new WPI_TalonSRX(8);
 
 


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
   
    intakeMotor.set(0.0);
    intakeMotor_Follower.set(0.0);
    intakeMotor_Follower.follow(intakeMotor);
    
    
    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run
        SendableRegistry.add(intakeMotor, "inTake motor 7");
        SendableRegistry.add(intakeMotor_Follower, "inTake motor 8");
    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

   
    // Put methods for controlling this subsystem
    // here. Call these from Commands.    
    public void setIntakeMotor(double d) {
        intakeMotor.set(d);
        intakeMotor_Follower.set(d);
    }

	public void reset() {
        intakeMotor.set(0.0);
        intakeMotor_Follower.set(0.0);
	}

    public void stop() {
        intakeMotor.stopMotor();
        intakeMotor_Follower.stopMotor();
    }

}

